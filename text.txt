// General syntax for storing data
localStorage.setItem('key', 'value');
// Also note that both the key & the value has to be strings. 
// So we stringify the value(if it's an object) before setting it.

// So, if you have an object as a value that you want to save, stringify it like this

let data = {
  'token': 'token',
  'name': 'name'
};
localStorage.setItem('myLSkey', JSON.stringify(data));

// OR for individual key-value pairs
localStorage.setItem('myLSkey', JSON.stringify({
  'token': 'token',
  'name': 'name'
}));

// To retrieve the data & save it to an existing variable
data = JSON.parse(localStorage.getItem('myLSkey'));

// To remove a value/item from localStorage
localStorage.removeItem("myLSkey");




const data = {
              firstName: this.firstName, 
              middleName: this.middleName,
              lastName: this.lastName
              }
localStorage.setItem('data', JSON.stringify(data));

const data = JSON.parse(localStorage.getItem('key'));
console.log(data.firstName);




setData(data) {
   const jsonData = JSON.stringify(data)
   localStorage.setItem('myData', jsonData)
}

getData() {
   return localStorage.getItem('myData')
}

removeData(key) {
   localStorage.removeItem(key)
}








{
  "products": [
    {
      "title": "Mens Casual Premium Slim Fit T-Shirts",
      "description": "The Henley style round neckline includes a three-button placket",
      "image": "https://fakestoreapi.com/img/71-3HjGNDUL._AC_SY879._SX._UX._SY._UY_.jpg",
      "actualPrice": 399,
      "discountPrice": 50,
      "id": 2
    },
    {
      "title": "Mens Cotton Jacket",
      "description": "great outerwear jackets",
      "image": "https://fakestoreapi.com/img/71li-ujtlUL._AC_UX679_.jpg",
      "actualPrice": 125,
      "discountPrice": 10,
      "id": 3
    },
    {
      "title": "Mens Casual Slim Fit",
      "description": "The color could be slightly different between on the screen and in practice",
      "image": "https://fakestoreapi.com/img/71YXzeOuslL._AC_UY879_.jpg",
      "actualPrice": 135,
      "discountPrice": 10,
      "id": 4
    },
    {
      "title": "Solid Gold Petite Micropave ",
      "description": "Satisfaction Guaranteed. Return or exchange any order within 30 days.Designed and sold by Hafeez Center in the United States. Satisfaction Guaranteed. Return or exchange any order within 30 days",
      "image": "https://fakestoreapi.com/img/61sbMiUnoGL._AC_UL640_QL65_ML3_.jpg",
      "actualPrice": 155,
      "discountPrice": 10,
      "id": 5
    },
    {
      "title": "White Gold Plated Princess",
      "description": "Classic Created Wedding Engagement Solitaire Diamond Promise Ring for Her. Gifts to spoil your love more for Engagement, Wedding, Anniversary, Valentine's Day...",
      "image": "https://fakestoreapi.com/img/71YAIFU48IL._AC_UL640_QL65_ML3_.jpg",
      "actualPrice": 195,
      "discountPrice": 10,
      "id": 6
    },
    {
      "title": "SanDisk SSD PLUS 1TB Internal SSD - SATA III 6 Gb/s",
      "description": "Easy upgrade for faster boot up, shutdown, application load and response",
      "image": "https://fakestoreapi.com/img/61U7T1koQqL._AC_SX679_.jpg",
      "actualPrice": 305,
      "discountPrice": 10,
      "id": 7
    },
    {
      "title": "Rain Jacket Women Windbreaker Striped Climbing Raincoats",
      "description": "Lightweight perfet for trip or casual wear---Long sleeve with hooded, adjustable drawstring waist design",
      "image": "https://fakestoreapi.com/img/71HblAHs5xL._AC_UY879_-2.jpg",
      "actualPrice": 555,
      "discountPrice": 10,
      "id": 8
    },
    {
      "title": "Samsung 49-Inch CHG90 144Hz Curved Gaming Monitor (LC49HG90DMNXZA) â€“ Super Ultrawide Screen QLED",
      "description": "49 INCH SUPER ULTRAWIDE 32:9 CURVED GAMING MONITOR with dual 27 inch screen side by side QUANTUM DOT (QLED) TECHNOLOGY",
      "image": "https://fakestoreapi.com/img/81Zt42ioCgL._AC_SX679_.jpg",
      "actualPrice": 999,
      "discountPrice": 10,
      "id": 9
    }
  ]
}




Cart

import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { Products } from 'src/app/admin/admin/products';
import { ProductsService } from 'src/app/admin/api/products.service';

@Component({
  selector: 'app-cart',
  templateUrl: './cart.component.html',
  styleUrls: ['./cart.component.css']
})
export class CartComponent implements OnInit {

  // id:any;
  // product:Products
  items:any[];
  // items1:any
  constructor(private router:Router,private route: ActivatedRoute, private productService: ProductsService) { }

  ngOnInit(): void {
    const data = JSON.parse(localStorage.getItem('products'));
    console.log('items',data);
    this.items=data;
    // const data1= localStorage.getItem('products');
    // console.log('items1',data1);

    // this.id = this.route.snapshot.params['id'];

    // this.product = new Products();
    // this.productService.getProductId(this.id).subscribe( data => {
    //   this.product = data;
    // });
  }
  navigateToCheckOut(id:number){
    this.router.navigate(['user/checkOut',id])
  }
 
}



products

import { Component, OnInit } from '@angular/core';
import { Products } from 'src/app/admin/admin/products';
import { ProductsService } from 'src/app/admin/api/products.service';
import { Router } from '@angular/router';
@Component({
  selector: 'app-products',
  templateUrl: './products.component.html',
  styleUrls: ['./products.component.css']
})
export class ProductsComponent implements OnInit {

  product:Products[];
  item:any;
  constructor(private productService:ProductsService, private router:Router) { }
  items=[];
  ngOnInit(): void {
    this.getProduct();
  }
  private getProduct(){
    this.productService.getProductList().subscribe(data => {
      this.product = data;
    });
  }
  addToCart(id:number){
    
    // this.router.navigate(['user/cart',id])
    console.log('id',id);
    this.item=this.product.filter(val=>val.id===id)
    console.log('product',this.item);
    
    // localStorage.setItem('this.item', JSON.stringify(this.item));
    this.items.push(this.item)
    console.log('items set',this.items);
    localStorage.setItem('products', JSON.stringify(this.items));
    
    
    // this.item.push(this.items)
    // console.log('items',typeof( this.items));
    
    // localStorage.setItem("allEntries", JSON.stringify(this.items));
  }
  goToCartPage(){
    this.router.navigate(['user/cart'])

  }
}


